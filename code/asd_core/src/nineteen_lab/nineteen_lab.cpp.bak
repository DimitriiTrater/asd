#include "nineteen_lab/nineteen_lab.hpp"
#include <algorithm>
#include <iostream>
#include <optional>

const double EPS = 1E-9;

struct pt {
  double x, y;

  bool operator<(const pt &p) const {
    return x < p.x - EPS || abs(x - p.x) < EPS && y < p.y - EPS;
  }
};

struct line {
  double a, b, c;

  line() {}
  line(pt p, pt q) {
    a = p.y - q.y;
    b = q.x - p.x;
    c = -a * p.x - b * p.y;
    norm();
  }

  void norm() {
    double z = sqrt(a * a + b * b);
    if (abs(z) > EPS)
      a /= z, b /= z, c /= z;
  }

  double dist(pt p) const { return a * p.x + b * p.y + c; }
};

auto det = [](auto a, auto b, auto c, auto d) { return a * d - b * c; };


inline bool betw(double l, double r, double x) {
  return std::min(l, r) <= x + EPS && x <= std::max(l, r) + EPS;
}

inline bool intersect_1d(double a, double b, double c, double d) {
  if (a > b)
    std::swap(a, b);
  if (c > d)
    std::swap(c, d);
  return std::max(a, c) <= std::min(b, d) + EPS;
}

bool intersect(pt a, pt b, pt c, pt d, pt &left, pt &right) {
  if (!intersect_1d(a.x, b.x, c.x, d.x) || !intersect_1d(a.y, b.y, c.y, d.y))
    return false;
  line m(a, b);
  line n(c, d);
  double zn = det(m.a, m.b, n.a, n.b);
  if (std::abs(zn) < EPS) {
    if (std::abs(m.dist(c)) > EPS || std::abs(n.dist(a)) > EPS)
      return false;
    if (b < a)
      std::swap(a, b);
    if (d < c)
      std::swap(c, d);
    left = std::max(a, c);
    right = std::min(b, d);
    return true;
  } else {
    left.x = right.x = -det(m.c, m.b, n.c, n.b) / zn;
    left.y = right.y = -det(m.a, m.c, n.a, n.c) / zn;
    return betw(a.x, b.x, left.x) && betw(a.y, b.y, left.y) &&
           betw(c.x, d.x, left.x) && betw(c.y, d.y, left.y);
  }
}

// bool parall(vec first, vec second) {
//   if (first.x / second.x == first.y / second.y) {
//     return true;
//   }
//   return false;
// }

bool parall(line first, line second) {
  if ((first.A / second.A) == (first.B / second.B)) {
    return true;
  }
  return false;
}

std::optional<vec> inter_lines(const line &first, const line &second) {

  if (parall(first, second)) {
    return std::nullopt;
  }

  float det = first.A * second.B - second.A * first.B;
  std::cout << det;
  float x = (first.B * second.C - second.B * first.C) / det;
  float y = (second.A * first.C - first.A * second.C) / det;
  return vec{x, y};
}

std::optional<vec> inter_line_segment(const line &line,
                                      const segment &segment) {
  // if (parall(line.direction, segment.point_second - segment.point_first)) {
  //   return std::nullopt;
  // }
}

std::optional<vec> inter_segments(const segment &first, const segment &second) {
  line first_line{first.point_first, first.point_second};
  line second_line{second.point_first, second.point_second};

  if (auto opt_point_of_inter = inter_lines(first_line, second_line);
      opt_point_of_inter.has_value()) {

    std::cout << opt_point_of_inter.value();

    auto point_of_inter = opt_point_of_inter.value();
    if ((vec::len(first.point_first - point_of_inter) +
             vec::len(first.point_second - point_of_inter) ==
         vec::len(first.point_first - first.point_second)) and
        (vec::len(second.point_first - point_of_inter) +
             vec::len(second.point_second - point_of_inter) ==
         vec::len(second.point_first - second.point_second))) {
      return point_of_inter;
    }
  }
  return std::nullopt;
}

void start_nnt() {
  auto A = vec(1, 1);
  auto B = vec(1, 5);
  auto C = vec(3, 1);
  auto D = vec(3, 5);

  auto AB = segment(A, B);
  auto BC = segment(B, C);
  auto CD = segment(C, D);
  auto DA = segment(D, A);

  std::cout << inter_segments(AB, BC).value();
}
